/*
 * Copyright (C) 2016 CodeFireUA <edu@codefire.com.ua>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package javathreads;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Properties;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.ListModel;

/**
 *
 * @author CodeFireUA <edu@codefire.com.ua>
 */
public class MainFrame extends javax.swing.JFrame implements DownloadFileTask.DownloadFileTaskListener {

    private static final String PROPS_FILE = "settings.properties";
    private final Properties props = new Properties();
    private JFileChooser directoryChooser;
    private boolean downloading;

    private ExecutorService threadPool;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        getRootPane().setDefaultButton(jbRequest);

        // Ceterize frame
        setLocationRelativeTo(null);

        Settings.load(props, PROPS_FILE);

        if (!props.containsKey("storage")) {
            props.setProperty("storage", System.getProperty("user.home"));
        }

        // DIRECTORY CHOOSER
        File storage = new File(props.getProperty("storage"));
        jtfStorage.setText(storage.getAbsolutePath());

        directoryChooser = new JFileChooser();
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        directoryChooser.setCurrentDirectory(storage);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jbRequest = new javax.swing.JButton();
        jtfPlaylistAddress = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlDownloads = new javax.swing.JList<>();
        jpbDownloadProgress = new javax.swing.JProgressBar();
        jbDownload = new javax.swing.JButton();
        jbBrowse = new javax.swing.JButton();
        jtfStorage = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("URL (file list):");

        jbRequest.setText("Request");
        jbRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRequestActionPerformed(evt);
            }
        });

        jtfPlaylistAddress.setText("http://www.ex.ua/playlist/9426590.m3u");

        jScrollPane1.setViewportView(jlDownloads);

        jbDownload.setText("Download");
        jbDownload.setEnabled(false);
        jbDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDownloadActionPerformed(evt);
            }
        });

        jbBrowse.setText("Browse...");
        jbBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBrowseActionPerformed(evt);
            }
        });

        jtfStorage.setEditable(false);
        jtfStorage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfStorageMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpbDownloadProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPlaylistAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRequest))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbBrowse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfStorage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDownload)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jbRequest)
                    .addComponent(jtfPlaylistAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpbDownloadProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbDownload)
                    .addComponent(jbBrowse)
                    .addComponent(jtfStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRequestActionPerformed

        DefaultListModel<DownloadFileTask> defaultListModel = new DefaultListModel<>();

        int downloads = 0;

        File storage = new File(props.getProperty("storage"));

        try (Scanner scan = new Scanner(new URL(jtfPlaylistAddress.getText()).openStream())) {
            while (scan.hasNextLine()) {
                DownloadFileTask downloadFileTask = new DownloadFileTask(new URL(scan.nextLine()), storage);
                defaultListModel.addElement(downloadFileTask);

                downloads++;
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (downloads > 0) {
            getRootPane().setDefaultButton(jbDownload);
            jbDownload.setEnabled(true);
            jbDownload.requestFocus();

            jlDownloads.setModel(defaultListModel);

            jpbDownloadProgress.setMaximum(downloads);
        }

    }//GEN-LAST:event_jbRequestActionPerformed

    private void jbDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDownloadActionPerformed
        if (!downloading) {
            downloading = true;
            jtfStorage.setText("Stop");

            jbRequest.setEnabled(false);
            jtfPlaylistAddress.setEnabled(false);
            jtfStorage.setEnabled(false);
            jbBrowse.setEnabled(false);

            ListModel<DownloadFileTask> model = jlDownloads.getModel();

            threadPool = Executors.newFixedThreadPool(5);

            for (int i = 0; i < model.getSize(); i++) {
                DownloadFileTask downloadFileTask = model.getElementAt(i);
                downloadFileTask.setListener(this);

                threadPool.execute(downloadFileTask);
            }

            threadPool.shutdown();
        } else {
            threadPool.shutdownNow();
            
            jtfStorage.setText("Downloading");
            downloading = false;

            jbRequest.setEnabled(true);
            jtfPlaylistAddress.setEnabled(true);
            jtfStorage.setEnabled(true);
            jbBrowse.setEnabled(true);
        }

    }//GEN-LAST:event_jbDownloadActionPerformed

    private void jtfStorageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfStorageMouseClicked

        promtSelectStorage();

    }//GEN-LAST:event_jtfStorageMouseClicked

    private void jbBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBrowseActionPerformed

        promtSelectStorage();

    }//GEN-LAST:event_jbBrowseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        Settings.store(props, PROPS_FILE);

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBrowse;
    private javax.swing.JButton jbDownload;
    private javax.swing.JButton jbRequest;
    private javax.swing.JList<DownloadFileTask> jlDownloads;
    private javax.swing.JProgressBar jpbDownloadProgress;
    private javax.swing.JTextField jtfPlaylistAddress;
    private javax.swing.JTextField jtfStorage;
    // End of variables declaration//GEN-END:variables

    @Override
    public void complete(DownloadFileTask downloadFileTask) {
        jpbDownloadProgress.setValue(jpbDownloadProgress.getValue() + 1);
    }

    @Override
    public void progress(DownloadFileTask downloadFileTask) {
        jlDownloads.repaint();
    }

    private void promtSelectStorage() {

        if (directoryChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String selectedFile = directoryChooser.getSelectedFile().getAbsolutePath();
            props.setProperty("storage", selectedFile);
            jtfStorage.setText(selectedFile);
        }

    }
}
